{ pkgs, config, lib, ... }:
with lib;

let
  cfg = config.jd.desktop;
  systemCfg = config.machineData.systemConfig;
in {
  options.jd.desktop = {
    type = mkOption {
      description = ''What desktop/wm to use. Options: "dwm"'';
      type = types.enum [ "dwm" ];
      default = null;
    };

    screenlock = {
      enable = mkOption {
        description = "Enable screen locking (xss-lock). Only used with dwm";
        type = types.bool;
        default = false;
      };

      timeout = {
        script = mkOption {
          description = "Script to run on timeout. Default null";
          type = with types; nullOr package;
          default = null;
        };

        time = mkOption {
          description = "Time in seconds until run timeout script. Default 180.";
          type = types.int;
          default = 180;
        };
      };

      lock = {
        command = mkOption {
          description = "Lock command. Default xsecurelock";
          type = types.str;
          default = "${pkgs.xsecurelock}/bin/xsecurelock";
        };

        time = mkOption {
          description = "Time in seconds after timeout until lock. Default 180.";
          type = types.int;
          default = 180;
        };
      };
    };
  };

  config = (
    let
      isStartX = (systemCfg.xserver.enable && (systemCfg.xserver.display-manager.type == "startx"));
      startCommand = "${pkgs.dwmJD}/bin/dwm";
    in {
      home.packages = mkIf (cfg.type == "dwm") (with pkgs; [
        dwmJD stJD dmenu xbindkeys
      ] ++ (if systemCfg.connectivity.sound.enable then [
        pavucontrol
        pasystray
      ] else []));

      xdg.enable = true;

      home.file.".xinitrc" = mkIf (isStartX) {
        executable = true;
        text = ''
          # .xinitrc autogenerated. Do not edit
          . "${config.home.profileDirectory}/etc/profile.d/hm-session-vars.sh"

          if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
            eval $(dbus-launch --exit-with-session --sh-syntax)
          fi
          
          # Need to import XDG_SESSION_ID & PATH for xss-lock and xsecurelock respectively
          systemctl --user import-environment DISPLAY XAUTHORITY XDG_SESSION_ID PATH XDG_CONFIG_HOME
          
          # https://bbs.archlinux.org/viewtopic.php?id=224652
          # Requires --systemd becuase of gnome-keyring error. Unsure how differs from systemctl --user import-environment
          if command -v dbus-update-activation-environment >/dev/null 2>&1; then
            dbus-update-activation-environment --systemd DISPLAY XAUTHORITY
          fi

          systemctl --user start graphical-session.target

          ${if config.machineData.name == "framework" then "xrandr --output eDP-1 --scale 1.5x1.5" else ""}
          xset s ${toString cfg.screenlock.timeout.time} ${toString cfg.screenlock.lock.time}
          ${pkgs.xbindkeys}/bin/xbindkeys
          ${startCommand}

          systemctl --user stop graphical-session.target
          systemctl --user stop graphical-session-pre.target

          # Wait until the units actually stop.
          while [ -n "$(systemctl --user --no-legend --state=deactivating list-units)" ]; do
            sleep 0.5
          done
        '';
      };

      home.file.".xbindkeysrc" = mkIf (cfg.type == "dwm" && systemCfg.connectivity.sound.enable) {
        text = ''
          # Mute volume
          "${pkgs.scripts.soundTools}/bin/stools vol toggle"
            XF86AudioMute
          # Raise volume
          "${pkgs.scripts.soundTools}/bin/stools vol up"
            XF86AudioRaiseVolume
          # Lower volume
          "${pkgs.scripts.soundTools}/bin/stools vol down"
            XF86AudioLowerVolume
          # Mute microphone
          "${pkgs.scripts.soundTools}/bin/stools mic toggle"
            XF86AudioMicMute
        '';
      };

      systemd = mkIf (cfg.type == "dwm" && cfg.screenlock.enable) {
        user.services = {
          xss-lock = {
            Install = {
              WantedBy = [ "graphical-session.target" ];
            };

            Unit = {
              Description = "XSS Lock Daemon";
              PartOf = [ "graphical-session.target" ];
              After = [ "graphical-session.target" ];
            };

            Service = {
              ExecStart = "${pkgs.xss-lock}/bin/xss-lock -s \${XDG_SESSION_ID} ${if cfg.screenlock.timeout.script == null then "" else "-n ${cfg.screenlock.timeout.script}"} -l -- ${cfg.screenlock.lock.command}";
            };
          };
        };
      };
    
      services.gnome-keyring.enable = true;

      gtk = {
        enable = true;
        theme = {
          package = with pkgs; arc-theme;
          name = "Arc-Dark";
        };
      };
    }
  );
}
